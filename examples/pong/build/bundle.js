!function(n){var e={};function t(i){if(e[i])return e[i].exports;var c=e[i]={i:i,l:!1,exports:{}};return n[i].call(c.exports,c,c.exports,t),c.l=!0,c.exports}t.m=n,t.c=e,t.d=function(n,e,i){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:i})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var c in n)t.d(i,c,function(e){return n[e]}.bind(null,c));return i},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="./build",t(t.s=1)}([function(module,exports){!function(n){var e={};function t(i){if(e[i])return e[i].exports;var c=e[i]={i:i,l:!1,exports:{}};return n[i].call(c.exports,c,c.exports,t),c.l=!0,c.exports}t.m=n,t.c=e,t.d=function(n,e,i){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:i})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var c in n)t.d(i,c,function(e){return n[e]}.bind(null,c));return i},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=2)}([function(module,exports){eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Engine =\n/*#__PURE__*/\nfunction () {\n  function Engine(props) {\n    _classCallCheck(this, Engine);\n\n    this.state = {\n      scenes: [],\n      activeScene: null,\n      gx: null\n    };\n  }\n  /**\r\n   * @param {String} name\r\n   * @param {Scene} scene\r\n   */\n\n\n  _createClass(Engine, [{\n    key: "registerScene",\n    value: function registerScene(name, scene) {\n      this.state.scenes.push({\n        name: name,\n        scene: scene\n      });\n    }\n    /**\r\n     * @param {String} name\r\n     */\n\n  }, {\n    key: "scene",\n    value: function scene(name) {\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          activeScene = _this$state.activeScene;\n      this.state.activeScene = scenes.find(function (scene) {\n        return scene.name === name;\n      }) || activeScene;\n    }\n  }, {\n    key: "update",\n    value: function update() {}\n  }, {\n    key: "render",\n    value: function render() {\n      var gx = this.state.gx;\n    }\n  }]);\n\n  return Engine;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL0VuZ2luZS5qcz8wZTFkIl0sIm5hbWVzIjpbIkVuZ2luZSIsInByb3BzIiwic3RhdGUiLCJzY2VuZXMiLCJhY3RpdmVTY2VuZSIsImd4IiwibmFtZSIsInNjZW5lIiwicHVzaCIsImZpbmQiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUVNQSxNOzs7QUFDRixrQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUNmLFNBQUtDLEtBQUwsR0FBYTtBQUNUQyxZQUFNLEVBQUUsRUFEQztBQUVUQyxpQkFBVyxFQUFFLElBRko7QUFHVEMsUUFBRSxFQUFFO0FBSEssS0FBYjtBQUtIO0FBRUQ7Ozs7Ozs7O2tDQUljQyxJLEVBQU1DLEssRUFBTztBQUN2QixXQUFLTCxLQUFMLENBQVdDLE1BQVgsQ0FBa0JLLElBQWxCLENBQXVCO0FBQUVGLFlBQUksRUFBSkEsSUFBRjtBQUFRQyxhQUFLLEVBQUxBO0FBQVIsT0FBdkI7QUFDSDtBQUVEOzs7Ozs7MEJBR01ELEksRUFBTTtBQUFBLHdCQUN3QixLQUFLSixLQUQ3QjtBQUFBLFVBQ0FDLE1BREEsZUFDQUEsTUFEQTtBQUFBLFVBQ1FDLFdBRFIsZUFDUUEsV0FEUjtBQUVSLFdBQUtGLEtBQUwsQ0FBV0UsV0FBWCxHQUF5QkQsTUFBTSxDQUFDTSxJQUFQLENBQVksVUFBQUYsS0FBSztBQUFBLGVBQUlBLEtBQUssQ0FBQ0QsSUFBTixLQUFlQSxJQUFuQjtBQUFBLE9BQWpCLEtBQTZDRixXQUF0RTtBQUNIOzs7NkJBRVEsQ0FFUjs7OzZCQUVRO0FBQUEsVUFDR0MsRUFESCxHQUNVLEtBQUtILEtBRGYsQ0FDR0csRUFESDtBQUVSIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNsYXNzIEVuZ2luZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHNjZW5lczogW10sXHJcbiAgICAgICAgICAgIGFjdGl2ZVNjZW5lOiBudWxsLFxyXG4gICAgICAgICAgICBneDogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxyXG4gICAgICogQHBhcmFtIHtTY2VuZX0gc2NlbmVcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJTY2VuZShuYW1lLCBzY2VuZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2NlbmVzLnB1c2goeyBuYW1lLCBzY2VuZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXHJcbiAgICAgKi9cclxuICAgIHNjZW5lKG5hbWUpIHtcclxuICAgICAgICBjb25zdCB7IHNjZW5lcywgYWN0aXZlU2NlbmUgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTY2VuZSA9IHNjZW5lcy5maW5kKHNjZW5lID0+IHNjZW5lLm5hbWUgPT09IG5hbWUpIHx8IGFjdGl2ZVNjZW5lO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHsgZ3ggfSA9IHRoaXMuc3RhdGU7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval("window.requestAnimationFrame = window.requestAnimationFrame || function (callback) {\n  window.setTimeout(callback, 16);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL0NvbXBhdGFiaWxpdHkuanM/MWFmMyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLHFCQUFQLEdBQStCRCxNQUFNLENBQUNDLHFCQUFQLElBQWdDLFVBQVNDLFFBQVQsRUFBbUI7QUFBRUYsUUFBTSxDQUFDRyxVQUFQLENBQWtCRCxRQUFsQixFQUEyQixFQUEzQjtBQUFnQyxDQUFwSCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24oY2FsbGJhY2spIHsgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssMTYpIH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/engine/Compatability.js\nvar Compatability = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/engine/Engine.js\nvar Engine = __webpack_require__(0);\nvar Engine_default = /*#__PURE__*/__webpack_require__.n(Engine);\n\n// CONCATENATED MODULE: ./src/engine/Scene.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Scene =\n/*#__PURE__*/\nfunction () {\n  function Scene(props) {\n    _classCallCheck(this, Scene);\n  }\n\n  _createClass(Scene, [{\n    key: "registerObjects",\n    value: function registerObjects() {}\n  }, {\n    key: "components",\n    get: function get() {}\n  }]);\n\n  return Scene;\n}();\n\n/* harmony default export */ var engine_Scene = (Scene);\n// CONCATENATED MODULE: ./src/engine/Display.js\nfunction Display_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Display_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Display_createClass(Constructor, protoProps, staticProps) { if (protoProps) Display_defineProperties(Constructor.prototype, protoProps); if (staticProps) Display_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Display =\n/*#__PURE__*/\nfunction () {\n  function Display(props) {\n    Display_classCallCheck(this, Display);\n\n    this.state = {\n      displayElm: null,\n      contextType: \'2d\',\n      ctx: null,\n      dpr: window.devicePixelRatio || 1,\n      bsr: this.getBSR(),\n      gfx: null\n    };\n    this.init = this.init.bind(this);\n    this.getPixelRatio = this.getPixelRatio.bind(this);\n    this.init(props);\n  }\n\n  Display_createClass(Display, [{\n    key: "init",\n    value: function init(props) {}\n  }, {\n    key: "setDisplay",\n    value: function setDisplay(canvasId) {\n      var displayDomId = document.getElementById(canvasId);\n      var ratio = this.getPixelRatio();\n      var _displayDomId$width = displayDomId.width,\n          w = _displayDomId$width.width,\n          h = _displayDomId$width.height;\n      displayDomId.width = w * ratio;\n      displayDomId.height = h * ratio;\n      displayDomId.style.width = w + "px";\n      displayDomId.style.height = h + "px";\n      this.state.displayElm = displayDomId;\n      this.state.ctx = displayDomId.getContext(this.state.contextType);\n    }\n  }, {\n    key: "getBSR",\n    value: function getBSR() {\n      return ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n    }\n  }, {\n    key: "createDisplay",\n    value: function createDisplay(targetElmId) {\n      if (targetElmId) {\n        this.state.displayElm = document.getElementById(targetElmId).createElement("canvas");\n      } else {\n        this.state.displayElm = document.createElement("canvas");\n      }\n\n      this.state.ctx = this.state.displayElm.getContext(this.state.contextType);\n    }\n  }, {\n    key: "getPixelRatio",\n    value: function getPixelRatio() {\n      var _this$state = this.state,\n          dpr = _this$state.dpr,\n          bsr = _this$state.bsr;\n      return dpr / bsr;\n    }\n  }, {\n    key: "getDisplayData",\n    value: function getDisplayData() {\n      var _this$state$displayEl = this.state.displayElm,\n          height = _this$state$displayEl.height,\n          width = _this$state$displayEl.width;\n      return {\n        heightCenter: height / 2,\n        widthCenter: width / 2,\n        height: height,\n        width: width\n      };\n    }\n  }, {\n    key: "clear",\n    value: function clear(g) {\n      g.clearRect(0, 0, g.canvas.width, g.canvas.height); //g.clearRect (0,0,this.getDisplayWidth(),this.getDisplayHeight());\n    }\n  }, {\n    key: "render",\n    value: function render(g) {\n      this.clear(g);\n    }\n  }]);\n\n  return Display;\n}();\n\n/* harmony default export */ var engine_Display = (Display);\n// CONCATENATED MODULE: ./src/Jinx.js\n/* concated harmony reexport Engine */__webpack_require__.d(__webpack_exports__, "Engine", function() { return Engine_default.a; });\n/* concated harmony reexport Scene */__webpack_require__.d(__webpack_exports__, "Scene", function() { return engine_Scene; });\n/* concated harmony reexport Display */__webpack_require__.d(__webpack_exports__, "Display", function() { return engine_Display; });\n\n\n\n\n\nvar Jinx = new Engine_default.a();\n/* harmony default export */ var src_Jinx = __webpack_exports__["default"] = (Jinx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL1NjZW5lLmpzPzU2NDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9EaXNwbGF5LmpzPzc4N2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL0ppbnguanM/OWM2NCJdLCJuYW1lcyI6WyJTY2VuZSIsInByb3BzIiwiRGlzcGxheSIsInN0YXRlIiwiZGlzcGxheUVsbSIsImNvbnRleHRUeXBlIiwiY3R4IiwiZHByIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJzciIsImdldEJTUiIsImdmeCIsImluaXQiLCJiaW5kIiwiZ2V0UGl4ZWxSYXRpbyIsImNhbnZhc0lkIiwiZGlzcGxheURvbUlkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJhdGlvIiwid2lkdGgiLCJ3IiwiaCIsImhlaWdodCIsInN0eWxlIiwiZ2V0Q29udGV4dCIsIndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwibXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwib0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJiYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwidGFyZ2V0RWxtSWQiLCJjcmVhdGVFbGVtZW50IiwiaGVpZ2h0Q2VudGVyIiwid2lkdGhDZW50ZXIiLCJnIiwiY2xlYXJSZWN0IiwiY2FudmFzIiwiY2xlYXIiLCJKaW54IiwiRW5naW5lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0lBRU1BLEs7OztBQUNGLGlCQUFZQyxLQUFaLEVBQW1CO0FBQUE7QUFBRTs7OztzQ0FJSCxDQUFFOzs7d0JBRkgsQ0FBRTs7Ozs7O0FBTVJELHNEQUFmLEU7Ozs7Ozs7O0lDVk1FLE87OztBQUNGLG1CQUFZRCxLQUFaLEVBQW1CO0FBQUE7O0FBQ2YsU0FBS0UsS0FBTCxHQUFhO0FBQ1RDLGdCQUFVLEVBQUUsSUFESDtBQUVUQyxpQkFBVyxFQUFFLElBRko7QUFHVEMsU0FBRyxFQUFFLElB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O0FBQ0c7OzsyQkFFTVksQyxFQUFHO0FBQ04sV0FBS0csS0FBTCxDQUFXSCxDQUFYO0FBQ0g7Ozs7OztBQUlVbEMsMERBQWYsRTs7QUM1RUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU1BLElBQU1zQyxJQUFJLEdBQUcsSUFBSUMsZ0JBQUosRUFBYjtBQUNlRCxrRkFBZiIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5jbGFzcyBTY2VuZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge31cclxuXHJcbiAgICBnZXQgY29tcG9uZW50cygpIHt9XHJcblxyXG4gICAgcmVnaXN0ZXJPYmplY3RzKCkge31cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNjZW5lOyIsIlxyXG5jbGFzcyBEaXNwbGF5IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgZGlzcGxheUVsbTogbnVsbCxcclxuICAgICAgICAgICAgY29udGV4dFR5cGU6ICcyZCcsXHJcbiAgICAgICAgICAgIGN0eDogbnVsbCxcclxuICAgICAgICAgICAgZHByOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxLFxyXG4gICAgICAgICAgICBic3I6IHRoaXMuZ2V0QlNSKCksXHJcbiAgICAgICAgICAgIGdmeDogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdCA9IHRoaXMuaW5pdC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZ2V0UGl4ZWxSYXRpbyA9IHRoaXMuZ2V0UGl4ZWxSYXRpby5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaW5pdChwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdChwcm9wcykge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzZXREaXNwbGF5KGNhbnZhc0lkKSB7XHJcbiAgICAgICAgY29uc3QgZGlzcGxheURvbUlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2FudmFzSWQpO1xyXG5cdFx0Y29uc3QgcmF0aW8gPSB0aGlzLmdldFBpeGVsUmF0aW8oKTtcclxuXHRcdGNvbnN0IHsgd2lkdGg6IHcsIGhlaWdodDogaCB9ID0gZGlzcGxheURvbUlkLndpZHRoO1xyXG5cdFx0ZGlzcGxheURvbUlkLndpZHRoID0gdypyYXRpbztcclxuXHRcdGRpc3BsYXlEb21JZC5oZWlnaHQgPSBoKnJhdGlvO1xyXG5cdFx0ZGlzcGxheURvbUlkLnN0eWxlLndpZHRoID0gdytcInB4XCI7XHJcblx0XHRkaXNwbGF5RG9tSWQuc3R5bGUuaGVpZ2h0ID0gaCtcInB4XCI7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5kaXNwbGF5RWxtID0gZGlzcGxheURvbUlkO1xyXG4gICAgICAgIHRoaXMuc3RhdGUuY3R4ID0gZGlzcGxheURvbUlkLmdldENvbnRleHQodGhpcy5zdGF0ZS5jb250ZXh0VHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QlNSKCkge1xyXG4gICAgICAgIHJldHVybiBjdHgud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxyXG4gICAgICAgIGN0eC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XHJcbiAgICAgICAgY3R4Lm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxyXG4gICAgICAgIGN0eC5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxyXG4gICAgICAgIGN0eC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IDE7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlRGlzcGxheSh0YXJnZXRFbG1JZCkge1xyXG4gICAgICAgIGlmKHRhcmdldEVsbUlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZGlzcGxheUVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldEVsbUlkKS5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZGlzcGxheUVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RhdGUuY3R4ID0gdGhpcy5zdGF0ZS5kaXNwbGF5RWxtLmdldENvbnRleHQodGhpcy5zdGF0ZS5jb250ZXh0VHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGl4ZWxSYXRpbygpIHtcclxuICAgICAgICBjb25zdCB7IGRwciwgYnNyIH0gPSB0aGlzLnN0YXRlO1xyXG5cdFx0cmV0dXJuIGRwciAvIGJzcjtcclxuICAgIH1cclxuXHJcbiAgICBnZXREaXNwbGF5RGF0YSgpe1xyXG4gICAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gdGhpcy5zdGF0ZS5kaXNwbGF5RWxtO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhlaWdodENlbnRlcjogaGVpZ2h0LzIsXHJcbiAgICAgICAgICAgIHdpZHRoQ2VudGVyOiB3aWR0aC8yLFxyXG4gICAgICAgICAgICBoZWlnaHQsXHJcbiAgICAgICAgICAgIHdpZHRoXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY2xlYXIoZykge1xyXG5cdFx0Zy5jbGVhclJlY3QoMCwwLGcuY2FudmFzLndpZHRoLGcuY2FudmFzLmhlaWdodCk7XHJcblx0XHQvL2cuY2xlYXJSZWN0ICgwLDAsdGhpcy5nZXREaXNwbGF5V2lkdGgoKSx0aGlzLmdldERpc3BsYXlIZWlnaHQoKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJlbmRlcihnKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcihnKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERpc3BsYXk7IiwiaW1wb3J0ICcuL2VuZ2luZS9Db21wYXRhYmlsaXR5JztcclxuaW1wb3J0IEVuZ2luZSBmcm9tICcuL2VuZ2luZS9FbmdpbmUnO1xyXG5pbXBvcnQgU2NlbmUgZnJvbSAnLi9lbmdpbmUvU2NlbmUnO1xyXG5pbXBvcnQgRGlzcGxheSBmcm9tICcuL2VuZ2luZS9EaXNwbGF5JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBFbmdpbmUsXHJcbiAgICBTY2VuZSxcclxuICAgIERpc3BsYXlcclxufTtcclxuXHJcbmNvbnN0IEppbnggPSBuZXcgRW5naW5lKCk7XHJcbmV4cG9ydCBkZWZhdWx0IEppbng7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')}])},function(n,e,t){"use strict";t.r(e);t(0);console.log("pong")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,