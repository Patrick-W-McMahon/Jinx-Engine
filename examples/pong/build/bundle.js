!function(n){var t={};function e(i){if(t[i])return t[i].exports;var c=t[i]={i:i,l:!1,exports:{}};return n[i].call(c.exports,c,c.exports,e),c.l=!0,c.exports}e.m=n,e.c=t,e.d=function(n,t,i){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:i})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var c in n)e.d(i,c,function(t){return n[t]}.bind(null,c));return i},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=1)}([function(module,exports){!function(n){var t={};function e(i){if(t[i])return t[i].exports;var c=t[i]={i:i,l:!1,exports:{}};return n[i].call(c.exports,c,c.exports,e),c.l=!0,c.exports}e.m=n,e.c=t,e.d=function(n,t,i){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:i})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var c in n)e.d(i,c,function(t){return n[t]}.bind(null,c));return i},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=2)}([function(module,exports){eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Engine =\n/*#__PURE__*/\nfunction () {\n  function Engine(props) {\n    _classCallCheck(this, Engine);\n\n    this.state = {\n      scenes: [],\n      activeScene: null,\n      gx: null\n    };\n  }\n  /**\r\n   * @param {String} name\r\n   * @param {Scene} scene\r\n   */\n\n\n  _createClass(Engine, [{\n    key: "registerScene",\n    value: function registerScene(name, scene) {\n      this.state.scenes.push({\n        name: name,\n        scene: scene\n      });\n    }\n    /**\r\n     * @param {String} name\r\n     */\n\n  }, {\n    key: "scene",\n    value: function scene(name) {\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          activeScene = _this$state.activeScene;\n      this.state.activeScene = scenes.find(function (scene) {\n        return scene.name === name;\n      }) || activeScene;\n    }\n  }, {\n    key: "update",\n    value: function update() {}\n  }, {\n    key: "render",\n    value: function render() {\n      var gx = this.state.gx;\n    }\n  }]);\n\n  return Engine;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL0VuZ2luZS5qcz8wZTFkIl0sIm5hbWVzIjpbIkVuZ2luZSIsInByb3BzIiwic3RhdGUiLCJzY2VuZXMiLCJhY3RpdmVTY2VuZSIsImd4IiwibmFtZSIsInNjZW5lIiwicHVzaCIsImZpbmQiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUVNQSxNOzs7QUFDRixrQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUNmLFNBQUtDLEtBQUwsR0FBYTtBQUNUQyxZQUFNLEVBQUUsRUFEQztBQUVUQyxpQkFBVyxFQUFFLElBRko7QUFHVEMsUUFBRSxFQUFFO0FBSEssS0FBYjtBQUtIO0FBRUQ7Ozs7Ozs7O2tDQUljQyxJLEVBQU1DLEssRUFBTztBQUN2QixXQUFLTCxLQUFMLENBQVdDLE1BQVgsQ0FBa0JLLElBQWxCLENBQXVCO0FBQUVGLFlBQUksRUFBSkEsSUFBRjtBQUFRQyxhQUFLLEVBQUxBO0FBQVIsT0FBdkI7QUFDSDtBQUVEOzs7Ozs7MEJBR01ELEksRUFBTTtBQUFBLHdCQUN3QixLQUFLSixLQUQ3QjtBQUFBLFVBQ0FDLE1BREEsZUFDQUEsTUFEQTtBQUFBLFVBQ1FDLFdBRFIsZUFDUUEsV0FEUjtBQUVSLFdBQUtGLEtBQUwsQ0FBV0UsV0FBWCxHQUF5QkQsTUFBTSxDQUFDTSxJQUFQLENBQVksVUFBQUYsS0FBSztBQUFBLGVBQUlBLEtBQUssQ0FBQ0QsSUFBTixLQUFlQSxJQUFuQjtBQUFBLE9BQWpCLEtBQTZDRixXQUF0RTtBQUNIOzs7NkJBRVEsQ0FFUjs7OzZCQUVRO0FBQUEsVUFDR0MsRUFESCxHQUNVLEtBQUtILEtBRGYsQ0FDR0csRUFESDtBQUVSIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNsYXNzIEVuZ2luZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHNjZW5lczogW10sXHJcbiAgICAgICAgICAgIGFjdGl2ZVNjZW5lOiBudWxsLFxyXG4gICAgICAgICAgICBneDogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxyXG4gICAgICogQHBhcmFtIHtTY2VuZX0gc2NlbmVcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJTY2VuZShuYW1lLCBzY2VuZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2NlbmVzLnB1c2goeyBuYW1lLCBzY2VuZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXHJcbiAgICAgKi9cclxuICAgIHNjZW5lKG5hbWUpIHtcclxuICAgICAgICBjb25zdCB7IHNjZW5lcywgYWN0aXZlU2NlbmUgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTY2VuZSA9IHNjZW5lcy5maW5kKHNjZW5lID0+IHNjZW5lLm5hbWUgPT09IG5hbWUpIHx8IGFjdGl2ZVNjZW5lO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHsgZ3ggfSA9IHRoaXMuc3RhdGU7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval("window.requestAnimationFrame = window.requestAnimationFrame || function (callback) {\n  window.setTimeout(callback, 16);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL0NvbXBhdGFiaWxpdHkuanM/MWFmMyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLHFCQUFQLEdBQStCRCxNQUFNLENBQUNDLHFCQUFQLElBQWdDLFVBQVNDLFFBQVQsRUFBbUI7QUFBRUYsUUFBTSxDQUFDRyxVQUFQLENBQWtCRCxRQUFsQixFQUEyQixFQUEzQjtBQUFnQyxDQUFwSCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24oY2FsbGJhY2spIHsgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssMTYpIH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/engine/Compatability.js\nvar Compatability = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/engine/Engine.js\nvar Engine = __webpack_require__(0);\nvar Engine_default = /*#__PURE__*/__webpack_require__.n(Engine);\n\n// CONCATENATED MODULE: ./src/engine/Scene.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Scene =\n/*#__PURE__*/\nfunction () {\n  function Scene(props) {\n    _classCallCheck(this, Scene);\n  }\n\n  _createClass(Scene, [{\n    key: "registerObjects",\n    value: function registerObjects() {}\n  }, {\n    key: "components",\n    get: function get() {}\n  }]);\n\n  return Scene;\n}();\n\n/* harmony default export */ var engine_Scene = (Scene);\n// CONCATENATED MODULE: ./src/engine/Display.js\nfunction Display_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Display_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Display_createClass(Constructor, protoProps, staticProps) { if (protoProps) Display_defineProperties(Constructor.prototype, protoProps); if (staticProps) Display_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Display =\n/*#__PURE__*/\nfunction () {\n  function Display(props) {\n    Display_classCallCheck(this, Display);\n\n    this.state = {\n      displayElm: null,\n      contextType: \'2d\',\n      ctx: null,\n      dpr: window.devicePixelRatio || 1,\n      bsr: this.getBSR(),\n      gfx: null\n    };\n    this.init = this.init.bind(this);\n    this.getPixelRatio = this.getPixelRatio.bind(this);\n    this.init(props);\n  }\n\n  Display_createClass(Display, [{\n    key: "init",\n    value: function init(props) {}\n  }, {\n    key: "setDisplay",\n    value: function setDisplay(canvasId) {\n      var displayDomId = document.getElementById(canvasId);\n      var ratio = this.getPixelRatio();\n      var _displayDomId$width = displayDomId.width,\n          w = _displayDomId$width.width,\n          h = _displayDomId$width.height;\n      displayDomId.width = w * ratio;\n      displayDomId.height = h * ratio;\n      displayDomId.style.width = w + "px";\n      displayDomId.style.height = h + "px";\n      this.state.displayElm = displayDomId;\n      this.state.ctx = displayDomId.getContext(this.state.contextType);\n    }\n  }, {\n    key: "getBSR",\n    value: function getBSR() {\n      return ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n    }\n  }, {\n    key: "createDisplay",\n    value: function createDisplay(targetElmId) {\n      if (targetElmId) {\n        this.state.displayElm = document.getElementById(targetElmId).createElement("canvas");\n      } else {\n        this.state.displayElm = document.createElement("canvas");\n      }\n\n      this.state.ctx = this.state.displayElm.getContext(this.state.contextType);\n    }\n  }, {\n    key: "getPixelRatio",\n    value: function getPixelRatio() {\n      var _this$state = this.state,\n          dpr = _this$state.dpr,\n          bsr = _this$state.bsr;\n      return dpr / bsr;\n    }\n  }, {\n    key: "getDisplayData",\n    value: function getDisplayData() {\n      var _this$state$displayEl = this.state.displayElm,\n          height = _this$state$displayEl.height,\n          width = _this$state$displayEl.width;\n      return {\n        heightCenter: height / 2,\n        widthCenter: width / 2,\n        height: height,\n        width: width\n      };\n    }\n  }, {\n    key: "clear",\n    value: function clear(g) {\n      g.clearRect(0, 0, g.canvas.width, g.canvas.height); //g.clearRect (0,0,this.getDisplayWidth(),this.getDisplayHeight());\n    }\n  }, {\n    key: "render",\n    value: function render(g) {\n      this.clear(g);\n    }\n  }]);\n\n  return Display;\n}();\n\n/* harmony default export */ var engine_Display = (Display);\n// CONCATENATED MODULE: ./src/Jinx.js\n/* concated harmony reexport Engine */__webpack_require__.d(__webpack_exports__, "Engine", function() { return Engine_default.a; });\n/* concated harmony reexport Scene */__webpack_require__.d(__webpack_exports__, "Scene", function() { return engine_Scene; });\n/* concated harmony reexport Display */__webpack_require__.d(__webpack_exports__, "Display", function() { return engine_Display; });\n\n\n\n\n\nvar Jinx = Engine_default.a;\n/* harmony default export */ var src_Jinx = __webpack_exports__["default"] = (Jinx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL1NjZW5lLmpzPzU2NDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9EaXNwbGF5LmpzPzc4N2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL0ppbnguanM/OWM2NCJdLCJuYW1lcyI6WyJTY2VuZSIsInByb3BzIiwiRGlzcGxheSIsInN0YXRlIiwiZGlzcGxheUVsbSIsImNvbnRleHRUeXBlIiwiY3R4IiwiZHByIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJzciIsImdldEJTUiIsImdmeCIsImluaXQiLCJiaW5kIiwiZ2V0UGl4ZWxSYXRpbyIsImNhbnZhc0lkIiwiZGlzcGxheURvbUlkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJhdGlvIiwid2lkdGgiLCJ3IiwiaCIsImhlaWdodCIsInN0eWxlIiwiZ2V0Q29udGV4dCIsIndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwibXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwib0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJiYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwidGFyZ2V0RWxtSWQiLCJjcmVhdGVFbGVtZW50IiwiaGVpZ2h0Q2VudGVyIiwid2lkdGhDZW50ZXIiLCJnIiwiY2xlYXJSZWN0IiwiY2FudmFzIiwiY2xlYXIiLCJKaW54IiwiRW5naW5lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0lBRU1BLEs7OztBQUNGLGlCQUFZQyxLQUFaLEVBQW1CO0FBQUE7QUFBRTs7OztzQ0FJSCxDQUFFOzs7d0JBRkgsQ0FBRTs7Ozs7O0FBTVJELHNEQUFmLEU7Ozs7Ozs7O0lDVk1FLE87OztBQUNGLG1CQUFZRCxLQUFaLEVBQW1CO0FBQUE7O0FBQ2YsU0FBS0UsS0FBTCxHQUFhO0FBQ1RDLGdCQUFVLEVBQUUsSUFESDtBQUVUQyxpQkFBVyxFQUFFLElBRko7QUFHVEMsU0FBRyxFQUFFLElB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O0FBQ0c7OzsyQkFFTVksQyxFQUFHO0FBQ04sV0FBS0csS0FBTCxDQUFXSCxDQUFYO0FBQ0g7Ozs7OztBQUlVbEMsMERBQWYsRTs7QUM1RUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU1BLElBQU1zQyxJQUFJLEdBQUdDLGdCQUFiO0FBQ2VELGtGQUFmIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNsYXNzIFNjZW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7fVxyXG5cclxuICAgIGdldCBjb21wb25lbnRzKCkge31cclxuXHJcbiAgICByZWdpc3Rlck9iamVjdHMoKSB7fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2NlbmU7IiwiXHJcbmNsYXNzIERpc3BsYXkge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBkaXNwbGF5RWxtOiBudWxsLFxyXG4gICAgICAgICAgICBjb250ZXh0VHlwZTogJzJkJyxcclxuICAgICAgICAgICAgY3R4OiBudWxsLFxyXG4gICAgICAgICAgICBkcHI6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEsXHJcbiAgICAgICAgICAgIGJzcjogdGhpcy5nZXRCU1IoKSxcclxuICAgICAgICAgICAgZ2Z4OiBudWxsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0ID0gdGhpcy5pbml0LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5nZXRQaXhlbFJhdGlvID0gdGhpcy5nZXRQaXhlbFJhdGlvLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5pbml0KHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KHByb3BzKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHNldERpc3BsYXkoY2FudmFzSWQpIHtcclxuICAgICAgICBjb25zdCBkaXNwbGF5RG9tSWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNJZCk7XHJcblx0XHRjb25zdCByYXRpbyA9IHRoaXMuZ2V0UGl4ZWxSYXRpbygpO1xyXG5cdFx0Y29uc3QgeyB3aWR0aDogdywgaGVpZ2h0OiBoIH0gPSBkaXNwbGF5RG9tSWQud2lkdGg7XHJcblx0XHRkaXNwbGF5RG9tSWQud2lkdGggPSB3KnJhdGlvO1xyXG5cdFx0ZGlzcGxheURvbUlkLmhlaWdodCA9IGgqcmF0aW87XHJcblx0XHRkaXNwbGF5RG9tSWQuc3R5bGUud2lkdGggPSB3K1wicHhcIjtcclxuXHRcdGRpc3BsYXlEb21JZC5zdHlsZS5oZWlnaHQgPSBoK1wicHhcIjtcclxuICAgICAgICB0aGlzLnN0YXRlLmRpc3BsYXlFbG0gPSBkaXNwbGF5RG9tSWQ7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5jdHggPSBkaXNwbGF5RG9tSWQuZ2V0Q29udGV4dCh0aGlzLnN0YXRlLmNvbnRleHRUeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRCU1IoKSB7XHJcbiAgICAgICAgcmV0dXJuIGN0eC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XHJcbiAgICAgICAgY3R4Lm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcclxuICAgICAgICBjdHgubXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XHJcbiAgICAgICAgY3R4Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XHJcbiAgICAgICAgY3R4LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVEaXNwbGF5KHRhcmdldEVsbUlkKSB7XHJcbiAgICAgICAgaWYodGFyZ2V0RWxtSWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5kaXNwbGF5RWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0RWxtSWQpLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5kaXNwbGF5RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5jdHggPSB0aGlzLnN0YXRlLmRpc3BsYXlFbG0uZ2V0Q29udGV4dCh0aGlzLnN0YXRlLmNvbnRleHRUeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQaXhlbFJhdGlvKCkge1xyXG4gICAgICAgIGNvbnN0IHsgZHByLCBic3IgfSA9IHRoaXMuc3RhdGU7XHJcblx0XHRyZXR1cm4gZHByIC8gYnNyO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERpc3BsYXlEYXRhKCl7XHJcbiAgICAgICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSB0aGlzLnN0YXRlLmRpc3BsYXlFbG07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaGVpZ2h0Q2VudGVyOiBoZWlnaHQvMixcclxuICAgICAgICAgICAgd2lkdGhDZW50ZXI6IHdpZHRoLzIsXHJcbiAgICAgICAgICAgIGhlaWdodCxcclxuICAgICAgICAgICAgd2lkdGhcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjbGVhcihnKSB7XHJcblx0XHRnLmNsZWFyUmVjdCgwLDAsZy5jYW52YXMud2lkdGgsZy5jYW52YXMuaGVpZ2h0KTtcclxuXHRcdC8vZy5jbGVhclJlY3QgKDAsMCx0aGlzLmdldERpc3BsYXlXaWR0aCgpLHRoaXMuZ2V0RGlzcGxheUhlaWdodCgpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKGcpIHtcclxuICAgICAgICB0aGlzLmNsZWFyKGcpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGlzcGxheTsiLCJpbXBvcnQgJy4vZW5naW5lL0NvbXBhdGFiaWxpdHknO1xyXG5pbXBvcnQgRW5naW5lIGZyb20gJy4vZW5naW5lL0VuZ2luZSc7XHJcbmltcG9ydCBTY2VuZSBmcm9tICcuL2VuZ2luZS9TY2VuZSc7XHJcbmltcG9ydCBEaXNwbGF5IGZyb20gJy4vZW5naW5lL0Rpc3BsYXknO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIEVuZ2luZSxcclxuICAgIFNjZW5lLFxyXG4gICAgRGlzcGxheVxyXG59O1xyXG5cclxuY29uc3QgSmlueCA9IEVuZ2luZTtcclxuZXhwb3J0IGRlZmF1bHQgSmlueDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')}])},function(n,t,e){"use strict";e.r(t);e(0);console.log("pong")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,